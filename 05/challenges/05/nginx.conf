user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
	worker_connections 768;
}

http {
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	gzip on;
	gzip_disable "msie6";

    # 配置一个上限为 10M 的字典来存放指标
    lua_shared_dict prometheus_metrics 10M;
    # prometheus lua 脚本的存放路径，可以使用通配符
    lua_package_path "/home/shiyanlou/nginx-lua-prometheus/?.lua";
    # 启动时进行初始化，创建各个指标对象
    init_by_lua '
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    ';
    # 每个请求结束时，设置各指标的取值
    log_by_lua '
        local host = ngx.var.host:gsub("^www.", "")
        metric_requests:inc(1, {host, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time), {host})
    ';

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}